"use babel";

describe('The GCC provider for AtomLinter', function () {
  var main = require('../lib/main');
  var utility = require('../lib/utility.js');
  var settings = require("../lib/config").settings;

  beforeEach(function () {
    waitsForPromise(function () {
      main.messages = {};
      atom.config.set('linter-gcc.execPath', '/usr/bin/g++');
      atom.config.set('linter-gcc.gccDefaultCFlags', '-c -Wall -o /dev/null');
      atom.config.set('linter-gcc.gccDefaultCppFlags', '-c -Wall -std=c++11 -o /dev/null');
      atom.config.set('linter-gcc.gccErrorLimit', 15);
      atom.config.set('linter-gcc.gccIncludePaths', ' ');
      atom.config.set('linter-gcc.gccSuppressWarnings', true);
      atom.config.set('linter-gcc.gccLintOnTheFly', false);
      atom.config.set('linter-gcc.gccDebug', false);
      atom.config.set('linter-gcc.gccErrorString', 'error');
      atom.config.set('linter-gcc.gccWarningString', 'warning');
      atom.config.set('linter-gcc.gccNoteString', 'note');
      atom.packages.activatePackage('language-c');
      return atom.packages.activatePackage('linter-gcc');
    });
  });

  it('finds one error in error.cpp', function () {
    waitsForPromise(function () {
      filename = __dirname + '/files/error.cpp';
      return atom.workspace.open(filename).then(function (editor) {
        return main.lint(editor, editor.getPath(), editor.getPath()).then(function () {
          var length = utility.flattenHash(main.messages).length;
          expect(length).toEqual(1);
        });
      });
    });
  });

  it('finds no errors in comment.cpp', function () {
    waitsForPromise(function () {
      filename = __dirname + '/files/comment.cpp';
      return atom.workspace.open(filename).then(function (editor) {
        return main.lint(editor, editor.getPath(), editor.getPath()).then(function () {
          var length = utility.flattenHash(main.messages).length;
          expect(length).toEqual(0);
        });
      });
    });
  });

  it('finds one error in error.c', function () {
    waitsForPromise(function () {
      filename = __dirname + '/files/error.c';
      return atom.workspace.open(filename).then(function (editor) {
        return main.lint(editor, editor.getPath(), editor.getPath()).then(function () {
          var length = utility.flattenHash(main.messages).length;
          expect(length).toEqual(1);
        });
      });
    });
  });

  it('finds no errors in comment.c', function () {
    waitsForPromise(function () {
      filename = __dirname + '/files/comment.c';
      return atom.workspace.open(filename).then(function (editor) {
        return main.lint(editor, editor.getPath(), editor.getPath()).then(function () {
          var length = utility.flattenHash(main.messages).length;
          expect(length).toEqual(0);
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/home/loic/.atom/packages/linter-gcc/spec/linter-gcc-spec.js
